//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calc/Expression.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, NUMBER=5, WHITESPACE=6;
	public const int
		RULE_opadd = 0, RULE_opsub = 1, RULE_opmul = 2, RULE_opdiv = 3;
	public static readonly string[] ruleNames = {
		"opadd", "opsub", "opmul", "opdiv"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class OpaddContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ExpressionParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ExpressionParser.NUMBER, i);
		}
		public OpaddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opadd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOpadd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOpadd(this);
		}
	}

	[RuleVersion(0)]
	public OpaddContext opadd() {
		OpaddContext _localctx = new OpaddContext(Context, State);
		EnterRule(_localctx, 0, RULE_opadd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; Match(NUMBER);
			State = 9; Match(T__0);
			State = 10; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpsubContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ExpressionParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ExpressionParser.NUMBER, i);
		}
		public OpsubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opsub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOpsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOpsub(this);
		}
	}

	[RuleVersion(0)]
	public OpsubContext opsub() {
		OpsubContext _localctx = new OpsubContext(Context, State);
		EnterRule(_localctx, 2, RULE_opsub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; Match(NUMBER);
			State = 13; Match(T__1);
			State = 14; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpmulContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ExpressionParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ExpressionParser.NUMBER, i);
		}
		public OpmulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opmul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOpmul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOpmul(this);
		}
	}

	[RuleVersion(0)]
	public OpmulContext opmul() {
		OpmulContext _localctx = new OpmulContext(Context, State);
		EnterRule(_localctx, 4, RULE_opmul);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; Match(NUMBER);
			State = 17; Match(T__2);
			State = 18; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdivContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ExpressionParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ExpressionParser.NUMBER, i);
		}
		public OpdivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdiv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOpdiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOpdiv(this);
		}
	}

	[RuleVersion(0)]
	public OpdivContext opdiv() {
		OpdivContext _localctx = new OpdivContext(Context, State);
		EnterRule(_localctx, 6, RULE_opdiv);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(NUMBER);
			State = 21; Match(T__3);
			State = 22; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '\x1B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', 
		'\x2', '\x2', '\x16', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x6', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x16', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\a', '\a', 
		'\x2', '\x2', '\v', '\f', '\a', '\x3', '\x2', '\x2', '\f', '\r', '\a', 
		'\a', '\x2', '\x2', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', 
		'\a', '\a', '\x2', '\x2', '\xF', '\x10', '\a', '\x4', '\x2', '\x2', '\x10', 
		'\x11', '\a', '\a', '\x2', '\x2', '\x11', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x13', '\a', '\a', '\x2', '\x2', '\x13', '\x14', '\a', 
		'\x5', '\x2', '\x2', '\x14', '\x15', '\a', '\a', '\x2', '\x2', '\x15', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\a', '\x2', '\x2', 
		'\x17', '\x18', '\a', '\x6', '\x2', '\x2', '\x18', '\x19', '\a', '\a', 
		'\x2', '\x2', '\x19', '\t', '\x3', '\x2', '\x2', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
