//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calc/Expression.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, PLUS=4, MINUS=5, MUL=6, DIV=7, NUMBER=8, WHITESPACE=9;
	public const int
		RULE_exp = 0;
	public static readonly string[] ruleNames = {
		"exp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'", null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "PLUS", "MINUS", "MUL", "DIV", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensExpContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ParensExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParensExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParensExp(this);
		}
	}
	public partial class MulDivExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(ExpressionParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(ExpressionParser.DIV, 0); }
		public MulDivExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterMulDivExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitMulDivExp(this);
		}
	}
	public partial class PowExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public PowExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterPowExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitPowExp(this);
		}
	}
	public partial class AddSubExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public AddSubExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterAddSubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitAddSubExp(this);
		}
	}
	public partial class NumExpContext : ExpContext {
		public ITerminalNode NUMBER() { return GetToken(ExpressionParser.NUMBER, 0); }
		public NumExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterNumExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitNumExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new ParensExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3; Match(T__0);
				State = 4; exp(0);
				State = 5; Match(T__1);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 21;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 19;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 10;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 11;
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 12; exp(5);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 13;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 14;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 15; exp(4);
						}
						break;
					case 3:
						{
						_localctx = new PowExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 16;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 17; Match(T__2);
						State = 18; exp(2);
						}
						break;
					}
					} 
				}
				State = 23;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x1B', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\v', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x19', '\v', '\x2', '\x3', '\x2', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x2', '\x4', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\x6', '\a', '\x2', 
		'\x1D', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\x5', '\b', '\x2', 
		'\x1', '\x2', '\x5', '\x6', '\a', '\x3', '\x2', '\x2', '\x6', '\a', '\x5', 
		'\x2', '\x2', '\x2', '\a', '\b', '\a', '\x4', '\x2', '\x2', '\b', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\v', '\a', '\n', '\x2', '\x2', '\n', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\n', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x17', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\f', '\x6', '\x2', 
		'\x2', '\r', '\xE', '\t', '\x2', '\x2', '\x2', '\xE', '\x16', '\x5', '\x2', 
		'\x2', '\a', '\xF', '\x10', '\f', '\x5', '\x2', '\x2', '\x10', '\x11', 
		'\t', '\x3', '\x2', '\x2', '\x11', '\x16', '\x5', '\x2', '\x2', '\x6', 
		'\x12', '\x13', '\f', '\x4', '\x2', '\x2', '\x13', '\x14', '\a', '\x5', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\x2', '\x2', '\x4', '\x15', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x12', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x5', '\n', '\x15', '\x17',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
